/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DataEntry.java
 *
 * Created on Oct 5, 2011, 1:27:28 AM
 */

package account;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sebi
 */
public class DataEntry extends javax.swing.JFrame {

    /** Creates new form DataEntry */
    public DataEntry() {
        initComponents();
        setTable();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        pNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        kg = new javax.swing.JRadioButton();
        grams = new javax.swing.JRadioButton();
        no = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        valueField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        prodTable = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        saveTable = new javax.swing.JButton();
        btnDeleteAll = new javax.swing.JButton();
        btnViewDetails = new javax.swing.JButton();
        btnNewBill = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Product Name");

        jLabel2.setText("Unit");

        buttonGroup1.add(kg);
        kg.setText("kg");

        buttonGroup1.add(grams);
        grams.setText("grams");

        buttonGroup1.add(no);
        no.setSelected(true);
        no.setText("Number of pieces");

        jLabel3.setText("Value per unit");

        jLabel4.setText("Available quantity");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        prodTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Unit", "Available Quantity", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        prodTable.setColumnSelectionAllowed(true);
        prodTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(prodTable);
        prodTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        saveTable.setText("Save");
        saveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveTableActionPerformed(evt);
            }
        });

        btnDeleteAll.setText("Delete All");
        btnDeleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteAllActionPerformed(evt);
            }
        });

        btnViewDetails.setText("View bills");
        btnViewDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewDetailsActionPerformed(evt);
            }
        });

        btnNewBill.setText("New bill");
        btnNewBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewBillActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(quantityField))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(kg)
                                .addGap(41, 41, 41)
                                .addComponent(grams)
                                .addGap(30, 30, 30)
                                .addComponent(no))
                            .addComponent(pNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valueField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSave)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnNewBill)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewDetails)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveTable))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(kg)
                    .addComponent(grams)
                    .addComponent(no))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(valueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel)
                    .addComponent(btnClear))
                .addContainerGap(78, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(65, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTable)
                    .addComponent(btnDeleteAll)
                    .addComponent(btnDelete)
                    .addComponent(btnViewDetails)
                    .addComponent(btnNewBill))
                .addGap(44, 44, 44))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            // TODO add your handling code here:
            String pName = pNameField.getText();
            String unit = "";
            if (kg.isSelected()) {
                unit = "kg";
            } else if (grams.isSelected()) {
                unit = "grams";
            } else {
                unit = "nos";
            }
            String value = valueField.getText();
            String quantity = quantityField.getText();
            String strUrl = "jdbc:derby:Account;user=app;password=app";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmt = dbConnection.createStatement();
            stmt.executeUpdate("insert into APP.PT ( PRODID , PRODNAME , UNIT , QUANTITY , VALUE ) values ('"+getId()+"','"+pName+"','" + unit + "','" + quantity + "','" +value+"')");
            stmt.close();
            DefaultTableModel model = (DefaultTableModel) prodTable.getModel();
            model.setRowCount(0);
            setTable();
        } catch (SQLException ex) {
            Logger.getLogger(DataEntry.class.getName()).log(Level.SEVERE, null, ex);
        }

}//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        pNameField.setText("");
        quantityField.setText("");
        valueField.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        Home hom=new Home();
        this.setVisible(false);
        hom.setVisible(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            // TODO add your handling code here:
            int r=JOptionPane.showConfirmDialog(this, "Do you want to delete the selected row?","Confirm",JOptionPane.YES_NO_OPTION);
            if(r==0){
            int row = prodTable.getSelectedRow();
            String s = prodTable.getValueAt(row, 0).toString();
            String strUrl = "jdbc:derby:Account;user=app;password=app";
            String query = "delete from APP.PT where PRODID='" + s + "'";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmtPT = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtPT.executeUpdate(query);
            stmtPT.close();
            DefaultTableModel model = (DefaultTableModel) prodTable.getModel();
            model.setRowCount(0);
            setTable();
            //JOptionPane.showMessageDialog(this, "Deleted successfully!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnDeleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteAllActionPerformed
        try {
            int r=JOptionPane.showConfirmDialog(this, "Do you want to delete the entire data?","Confirm",JOptionPane.YES_NO_OPTION);
            if(r==0){
            String strUrl = "jdbc:derby:Account;user=app;password=app";
            String query = "delete from APP.PT";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmtPT = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtPT.executeUpdate(query);
            stmtPT.close();
            DefaultTableModel model = (DefaultTableModel) prodTable.getModel();
            model.setRowCount(0);
            //JOptionPane.showMessageDialog(this, "Deleted successfully!");
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteAllActionPerformed

    private void btnNewBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBillActionPerformed
            Billing bil=new Billing();
            this.setVisible(false);
            bil.setVisible(true);
    }//GEN-LAST:event_btnNewBillActionPerformed

    private void btnViewDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewDetailsActionPerformed
            ViewDetails vi=new ViewDetails();
            this.setVisible(false);
            vi.setVisible(true);
    }//GEN-LAST:event_btnViewDetailsActionPerformed

    private void saveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveTableActionPerformed
        try {
            int f=JOptionPane.showConfirmDialog(this, "Do you want to update the record?","Confirm",JOptionPane.YES_NO_OPTION);
            if(f==0){
            String strUrl = "jdbc:derby:Account;user=app;password=app";
            String query = "delete from APP.PT";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmtPT = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            stmtPT.executeUpdate(query);
            int rc = prodTable.getRowCount();
            if(rc!=0){
                String prodid=getId();
                for (int i = 0; i < rc; i++) {
                    stmtPT.executeUpdate("insert into APP.PT ( PRODID , PRODNAME , UNIT , QUANTITY , VALUE ) values('" + prodTable.getValueAt(i, 0).toString() + "','" + prodTable.getValueAt(i, 1).toString() + "','"+prodTable.getValueAt(i, 2).toString()+"','"+prodTable.getValueAt(i, 3).toString()+"','"+prodTable.getValueAt(i, 4).toString()+"')");
            }
                JOptionPane.showMessageDialog(this, "Saved Successfully!");
            }
            else JOptionPane.showMessageDialog(this, "Nothing to save!");
            stmtPT.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(DataEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveTableActionPerformed

    private void setTable(){
        try {
            DefaultTableModel model = (DefaultTableModel) prodTable.getModel();
            String strUrl = "jdbc:derby:Account;user=app;password=app";
            String query = "select * from APP.PT";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmtPT = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs=stmtPT.executeQuery(query);
            rs.beforeFirst();
            while(rs.next()){
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3), rs.getString(4), rs.getString(5)});
            }
            stmtPT.close();
        } catch (SQLException ex) {
            Logger.getLogger(DataEntry.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataEntry().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteAll;
    private javax.swing.JButton btnNewBill;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnViewDetails;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton grams;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton kg;
    private javax.swing.JRadioButton no;
    private javax.swing.JTextField pNameField;
    private javax.swing.JTable prodTable;
    private javax.swing.JTextField quantityField;
    private javax.swing.JButton saveTable;
    private javax.swing.JTextField valueField;
    // End of variables declaration//GEN-END:variables
    String getId(){
        String id,code="p";
        try {

            String strUrl = "jdbc:derby:Account;user=app;password=app";
            Connection dbConnection = DriverManager.getConnection(strUrl);
            Statement stmt = dbConnection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
            ResultSet rs = stmt.executeQuery("select PRODID from APP.PT");
            int[] arrayId=new int[1000];
            rs.beforeFirst();
            if(rs.next()){
                id="";
            rs.beforeFirst();
            int i=0;
            while(rs.next())
            {
                arrayId[i]=Integer.parseInt(rs.getString(1).substring(1));
                i++;
            }
            int largest=arrayId[0];
            for(int j=1;j<arrayId.length;j++)
            {
                if(arrayId[j]>largest)largest=arrayId[j];
            }
            largest++;
            code=code.concat(String.valueOf(largest));
            }
            else
            {
                code="p".concat("1");
            }
            stmt.close();
            return code;
        } catch (SQLException ex) {
            Logger.getLogger(Billing.class.getName()).log(Level.SEVERE, null, ex);
        }return code;
    }
}
